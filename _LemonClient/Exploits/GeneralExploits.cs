using Il2CppSystem.Collections.Generic;
using System;
using System.Collections;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using VRC;
using VRC.SDKBase;
using VRC.Udon;
using VRC.UI;

namespace _LemonClient.Exploits
{
    class GeneralExploits
    {
		public static IEnumerator BetterAntiTheft(bool state)
		{
			VRCHandGrasper[] hand = UnityEngine.Object.FindObjectsOfType<VRCHandGrasper>();
			UnityEngine.Object.FindObjectsOfType<Player>();
			VRCInput inputForVRC = hand[0].field_Internal_VRCInput_2;
			VRCInput inputForVRC2 = hand[1].field_Internal_VRCInput_2;
			GameObject objectToStick = null;
			VRC_Pickup objectPickup = null;
			GameObject objectToStick2 = null;
			VRC_Pickup objectPickup2 = null;
			VRCPlayerApi currentPlayer = Networking.LocalPlayer;
			for (; ; )
			{
				bool flag = inputForVRC.field_Public_Single_0 == 0f && objectToStick != null;
				if (flag)
				{
					objectPickup.Drop();
					List<VRC_Interactable> interactions4 = new List<VRC_Interactable>();
					hand[0].field_Private_Boolean_2 = false;
					hand[0].field_Private_List_1_VRC_Interactable_0 = interactions4;
					objectPickup.currentLocalPlayer = null;
					objectPickup.currentlyHeldBy = null;
					hand[0].field_Internal_VRC_Pickup_0 = null;
					hand[0].field_Private_Rigidbody_0 = null;
					hand[0].field_Private_VRC_Pickup_0 = null;
					objectToStick = null;
					objectPickup = null;
					interactions4 = null;
				}
				bool flag2 = hand[0].field_Internal_VRC_Pickup_0 != null && objectToStick == null;
				if (flag2)
				{
					objectToStick = hand[0].field_Internal_VRC_Pickup_0.gameObject;
					objectPickup = hand[0].field_Internal_VRC_Pickup_0;
				}
				bool flag3 = objectToStick != null && inputForVRC.field_Public_Single_0 != 0f;
				if (flag3)
				{
					bool flag4 = Networking.GetOwner(objectToStick) != Networking.LocalPlayer;
					if (flag4)
					{
						Networking.LocalPlayer.TakeOwnership(objectToStick);
					}
					hand[0].field_Internal_VRC_Pickup_0 = objectToStick.GetComponent<VRC_Pickup>();
					hand[0].field_Private_Rigidbody_0 = objectToStick.GetComponent<Rigidbody>();
					hand[0].field_Private_VRC_Pickup_0 = objectToStick.GetComponent<VRC_Pickup>();
					List<VRC_Interactable> interactions5 = new List<VRC_Interactable>();
					UdonBehaviour[] udonBehaviours2 = objectToStick.GetComponents<UdonBehaviour>();
					int num;
					for (int i = 0; i < udonBehaviours2.Length; i = num)
					{
						interactions5.Add(udonBehaviours2[i]);
						num = i + 1;
					}
					hand[0].field_Private_Boolean_2 = true;
					hand[0].field_Private_List_1_VRC_Interactable_0 = interactions5;
					objectPickup.currentLocalPlayer = currentPlayer;
					objectPickup.currentlyHeldBy = hand[0];
					bool flag5 = Networking.GetOwner(objectToStick) != Networking.LocalPlayer;
					if (flag5)
					{
						Networking.LocalPlayer.TakeOwnership(objectToStick);
					}
					interactions5 = null;
					udonBehaviours2 = null;
				}
				bool flag6 = inputForVRC2.field_Public_Single_0 == 0f && objectToStick2 != null;
				if (flag6)
				{
					objectPickup2.Drop();
					List<VRC_Interactable> interactions6 = new List<VRC_Interactable>();
					hand[1].field_Private_Boolean_2 = false;
					hand[1].field_Private_List_1_VRC_Interactable_0 = interactions6;
					objectPickup2.currentLocalPlayer = null;
					objectPickup2.currentlyHeldBy = null;
					hand[1].field_Internal_VRC_Pickup_0 = null;
					hand[1].field_Private_Rigidbody_0 = null;
					hand[1].field_Private_VRC_Pickup_0 = null;
					objectToStick2 = null;
					objectPickup2 = null;
					interactions6 = null;
				}
				bool flag7 = hand[1].field_Internal_VRC_Pickup_0 != null && objectToStick2 == null;
				if (flag7)
				{
					objectToStick2 = hand[1].field_Internal_VRC_Pickup_0.gameObject;
					objectPickup2 = hand[1].field_Internal_VRC_Pickup_0;
				}
				bool flag8 = objectToStick2 != null && inputForVRC2.field_Public_Single_0 != 0f;
				if (flag8)
				{
					bool flag9 = Networking.GetOwner(objectToStick2) != Networking.LocalPlayer;
					if (flag9)
					{
						Networking.LocalPlayer.TakeOwnership(objectToStick2);
					}
					hand[1].field_Internal_VRC_Pickup_0 = objectToStick2.GetComponent<VRC_Pickup>();
					hand[1].field_Private_Rigidbody_0 = objectToStick2.GetComponent<Rigidbody>();
					hand[1].field_Private_VRC_Pickup_0 = objectToStick2.GetComponent<VRC_Pickup>();
					List<VRC_Interactable> interactions7 = new List<VRC_Interactable>();
					UdonBehaviour[] udonBehaviours3 = objectToStick2.GetComponents<UdonBehaviour>();
					int num2;
					for (int j = 0; j < udonBehaviours3.Length; j = num2)
					{
						interactions7.Add(udonBehaviours3[j]);
						num2 = j + 1;
					}
					hand[1].field_Private_Boolean_2 = true;
					hand[1].field_Private_List_1_VRC_Interactable_0 = interactions7;
					objectPickup2.currentLocalPlayer = currentPlayer;
					objectPickup2.currentlyHeldBy = hand[1];
					objectPickup2.AutoHold = (VRC_Pickup.AutoHoldMode)1;
					bool flag10 = Networking.GetOwner(objectToStick2) != Networking.LocalPlayer;
					if (flag10)
					{
						Networking.LocalPlayer.TakeOwnership(objectToStick2);
					}
					interactions7 = null;
					udonBehaviours3 = null;
				}
				yield return null;
			}
			yield break;
		}
	}
}
