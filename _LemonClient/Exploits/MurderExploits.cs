using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.SceneManagement;
using VRC;
using VRC.Core;
using VRC.Udon;
using VRC.SDKBase;
using MelonLoader;
using UnityEngine.UI;
using VRC.UI.Elements.Menus;
using System.Collections;
using VRC.SDK3.Components;

namespace _LemonClient.Exploits
{
    public class MurderExploits
    {
        public static bool setKillAuraLeft;
        public static bool setKillAuraRight;
        public static bool isFindingKiller;
        /*
         * 1 = revolver
         * 2 = luger
         * 3 = shotgun
         * 4 = knife
         * 5 = grenade
         * 6 = smoke
         */
        public static void BringRoleWeapon(int requestedWeapon)
        {
            GameObject weaponObject = GameObject.Find("Game Logic/Weapons");
            bool gunCheck = !weaponObject;
            if (!gunCheck)                                                                                                                        //If the gun exists
            {
                for (int i = 0; i < weaponObject.transform.childCount; i++)
                {
                    Transform child = weaponObject.transform.GetChild(i);
                    bool revFlag = child && child.name == "Revolver" && requestedWeapon == 1;
                    bool knifeFlag = child && child.name == "Knife (0)" && requestedWeapon == 4;
                    if (revFlag)
                    {
                        Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, child.gameObject);        //Sets gun to local owner
                        child.position = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 0.2f, 0f);
                    }
                    if (knifeFlag)
                    {
                        Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, child.gameObject);        //Sets gun to local owner
                        child.position = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 0.2f, 0f);
                    }
                }
            }
        }

        public static void BringClueWeapon(int requestedWeapon)
        {
            GameObject unlockObject = GameObject.Find("Game Logic/Weapons/Unlockables");
            bool nullCheck = !unlockObject;
            if (!nullCheck)
            {
                for (int i = 0; i < unlockObject.transform.childCount; i++)
                {
                    Transform child = unlockObject.transform.GetChild(i);
                    bool lugerFlag = child && child.name == "Luger (0)" && requestedWeapon == 2;
                    bool shotFlag = child && child.name == "Shotgun (0)" && requestedWeapon == 3;
                    bool boomFlag = child && child.name == "Frag (0)" && requestedWeapon == 5;
                    bool smokeFlag = child && child.name == "Smoke (0)" && requestedWeapon == 6;
                    if (lugerFlag)
                    {
                        Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, child.gameObject);        //Sets luger to local owner
                        child.position = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 0.2f, 0f);
                    }
                    if (shotFlag)
                    {
                        Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, child.gameObject);        //Sets shotgun to local owner
                        child.position = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 0.2f, 0f);
                    }
                    if (boomFlag)
                    {
                        Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, child.gameObject);        //Sets grenade to local owner
                        child.position = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 0.2f, 0f);
                    }
                    if (smokeFlag)
                    {
                        Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, child.gameObject);        //Sets smoke to local owner
                        child.position = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 0.2f, 0f);
                    }
                }
            }
        }

        public static void RespawnPickups()
        {
            foreach (VRC_Pickup vrc_Pickup in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
            {
                Networking.LocalPlayer.TakeOwnership(vrc_Pickup.gameObject);
                vrc_Pickup.transform.localPosition = new Vector3(0f, -100000f, 0f);
            }
        }

        public static void ForceGrab()
        {
            foreach (VRC_Pickup vrc_Pickup in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
            {
                vrc_Pickup.pickupable = true;
                vrc_Pickup.DisallowTheft = false;
            }
        }

        public static void FindKiller(float waitTime)
        {
            if (isFindingKiller == true)
            {
                return;
            }
            isFindingKiller = true;
            MelonLoader.MelonCoroutines.Start(FindKillerEnumerator(waitTime));
        }

        public static System.Collections.IEnumerator FindKillerEnumerator(float waitTime)   //Shots MunchenClient! Love the code
        {
            yield return new WaitForSeconds(waitTime);
            GameObject playerList = GameObject.Find("Game Logic/Game Canvas/Game In Progress/Player List/Player List Group");

            if (playerList != null)
            {
                //Iterate through every player
                RectTransform[] players = playerList.GetComponentsInChildren<RectTransform>();

                for (int i = 0; i < players.Length; i++)
                {
                    //If they got no background we obviously don't wanna check them
                    UnityEngine.UI.Image entryBackground = players[i].GetComponent<UnityEngine.UI.Image>();

                    if (entryBackground == null)
                    {
                        continue;
                    }

                    //Comparing colors is way more fun - fuck you Jar
                    if (entryBackground.color.r >= 0.5f && entryBackground.color.g <= 0.2f && entryBackground.color.b <= 0.2f)
                    {
                        string playerName = players[i].GetComponentInChildren<UnityEngine.UI.Text>().text;

                        if (playerName != APIUser.CurrentUser.displayName)
                        {
                            MelonLogger.Msg("Murder is: " + playerName);
                            PlagueButtons.PlagueButtonScript.MurdererName = playerName;
                        }
                    }
                }
            }

            isFindingKiller = false;

            yield break;
        }

        public static void AntiBlind(bool toggleState)
        {
            GameObject blindHud = GameObject.Find("Game Logic/Player HUD/Blind HUD Anim");
            GameObject flashbangHud = GameObject.Find("Game Logic/Player HUD/Flashbang HUD Anim");

            if (blindHud != null)
            {
                blindHud.transform.localScale = toggleState ? new Vector3(0.0f, 0.0f, 0.0f) : new Vector3(1.0f, 1.0f, 1.0f);
            }

            if (flashbangHud != null)
            {
                flashbangHud.transform.localScale = toggleState ? new Vector3(0.0f, 0.0f, 0.0f) : new Vector3(1.0f, 1.0f, 1.0f);
            }
        }

        //Udon events
        //Be warned, shit is scuffed and skidded
        //Like, seriously, This shit is not my code
        //I am WAAAAAAAAAAAAAAAAAAAAAY too lazy to do this myself
        //Shots to ZeroDayRemastered for this code. Y'all saved me a shit tonne of effort

        public static IEnumerator GoldenGunForYou()
        {
            VRCPickup revolver = GameObject.Find("Revolver").GetComponent<VRCPickup>();
            for (; ; )
            {
                bool flag = revolver.currentPlayer != null;
                if (flag)
                {
                    VRCPlayerApi playerVrcPlayerApi = revolver.currentPlayer;
                    bool flag2 = playerVrcPlayerApi.displayName.Equals(APIUser.CurrentUser.displayName) && GameObject.Find("geo (patron)") == null;
                    if (flag2)
                    {
                        UdonBehaviour[] revolverEvent = GameObject.Find("Revolver").GetComponents<UdonBehaviour>();
                        revolverEvent[0].SendCustomNetworkEvent(0, "PatronSkin");
                        revolverEvent = null;
                    }
                    yield return null;
                    playerVrcPlayerApi = null;
                }
                yield return null;
            }
            yield break;
        }

        public static IEnumerator ClueEsp()
        {
            List<Renderer> cluesFound = new List<Renderer>();
            Transform[] allObjects = Resources.FindObjectsOfTypeAll<Transform>();
            Transform[] array = allObjects;
            foreach (Transform transform in array)
            {
                bool flag = transform.gameObject.name.Equals("Clue (photograph)") || transform.gameObject.name.Equals("Clue (notebook)") || transform.gameObject.name.Equals("Clue (locket)") || transform.gameObject.name.Equals("Clue (pocketwatch)") || transform.gameObject.name.Equals("Clue (postcard)");
                if (flag)
                {
                    cluesFound.Add(transform.GetChild(0).gameObject.GetComponent<Renderer>());
                }
                //transform = null;
            }
            Transform[] array2 = null;
            for (; ; )
            {
                foreach (Renderer renderer in cluesFound)
                {
                    bool flag2 = renderer != null;
                    if (flag2)
                    {
                        bool activeInHierarchy = renderer.gameObject.activeInHierarchy;
                        if (activeInHierarchy)
                        {
                            HighlightsFX.field_Private_Static_HighlightsFX_0.Method_Public_Void_Renderer_Boolean_0(renderer, true);
                        }
                        else
                        {
                            HighlightsFX.field_Private_Static_HighlightsFX_0.Method_Public_Void_Renderer_Boolean_0(renderer, false);
                        }
                    }
                    yield return new WaitForSeconds(0.2f);
                    //renderer = null;
                }
                List<Renderer>.Enumerator enumerator = default(List<Renderer>.Enumerator);
                yield return new WaitForSeconds(2f);
            }
            yield break;
        }

        public static void ForceStart()
        {
            foreach (GameObject gameObject in Resources.FindObjectsOfTypeAll<GameObject>())
            {
                bool flag = gameObject.name.Contains("Game Logic");
                if (flag)
                {
                    gameObject.GetComponent<UdonBehaviour>().SendCustomNetworkEvent(0, "SyncStartGame");
                }
            }
        }

        public static void SelfBystander()
        {
            VRCPlayer component = VRCPlayer.field_Internal_Static_VRCPlayer_0.gameObject.GetComponent<VRCPlayer>();
            string value = component._player.ToString();
            for (int i = 0; i < 24; i++)
            {
                string text = "Player Node (" + i.ToString() + ")";
                string text2 = "Game Logic/Game Canvas/Game In Progress/Player List/Player List Group/Player Entry (" + i.ToString() + ")/Player Name Text";
                bool flag = GameObject.Find(text2).GetComponent<Text>().text.Equals(value);
                if (flag)
                {
                    MelonLogger.Msg(text);
                    UdonBehaviour component2 = GameObject.Find(text).GetComponent<UdonBehaviour>();
                    component2.SendCustomNetworkEvent(0, "SyncAssignB");
                }
            }
        }

        public static void SelfMurderer()
        {
            VRCPlayer component = VRCPlayer.field_Internal_Static_VRCPlayer_0.gameObject.GetComponent<VRCPlayer>();
            string value = component._player.ToString();
            for (int i = 0; i < 24; i++)
            {
                string text = "Player Node (" + i.ToString() + ")";
                string text2 = "Game Logic/Game Canvas/Game In Progress/Player List/Player List Group/Player Entry (" + i.ToString() + ")/Player Name Text";
                bool flag = GameObject.Find(text2).GetComponent<Text>().text.Equals(value);
                if (flag)
                {
                    MelonLogger.Msg(text);
                    UdonBehaviour component2 = GameObject.Find(text).GetComponent<UdonBehaviour>();
                    component2.SendCustomNetworkEvent(0, "SyncAssignM");
                }
            }
        }
    }
}
